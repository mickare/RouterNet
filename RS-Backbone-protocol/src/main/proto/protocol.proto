syntax = "proto2";

package de.rennschnitzel.backbone.net.protocol;

import "component_uuid.proto";


message Namespace {
	required string name = 1;
}

message Server {
	required UUID uuid = 1;
	repeated string Namespace = 2;
}

message Error {
	enum Type {
		SERVER_ERROR = 0;
		PROTOCOL_ERROR = 1;
		BAD_CREDENTIALS = 2;
		UNAVAILABLE = 3;
		OVERLOADED = 4;
		IS_BOOTSTRAPPING = 5;
		UNAUTHORIZED = 6;
		INVALID = 7;
		CONFIG_ERROR = 8;
		ALREADY_EXISTS = 9;
	}
	required UUID sender = 1;
	required UUID target = 2;
	required Type type = 3;

}


message AuthChallenge {
	required fixed64 token = 1;
}

message AuthResponse {
	required fixed64 token = 1;
}

message AuthSuccess {
	required fixed64 token = 1;
}

message Register {
	required Server info = 1;
}

message Disconnect {
	required string reason = 1;
}

message NetworkTopolgy {
	repeated Namespace namespaces = 1;
	repeated Server servers = 2;
}

message ByteMessage {
	required UUID sender = 1;
	required UUID target = 2;
	required int32 id = 3;
	required bytes data = 4;
}

message Query {
	required int32 number = 1;
	required UUID sender = 2;
	required UUID target = 3;
	required int32 requestType = 4;
	required int32 responseType = 5;
}

message QueryRequest {
	required Query query = 1;
	required bytes data = 2;
}

message QueryCancel {
	required Query query = 1;
}

message QueryResponse {
	required Query query = 1;
	required bool success = 2;
	required bool cancelled = 3;
	required bytes data = 4;
}

service ByteQueryService {
	rpc call (QueryRequest) returns (QueryResponse);
}