syntax = "proto3";

package de.rennschnitzel.net.protocol;

import "NetworkProtocol.proto";
import "LoginProtocol.proto";
import "ComponentsProtocol.proto";

message ErrorMessage {
	enum Type {
		UNDEFINED = 0;
		SERVER_ERROR = 1;
		PROTOCOL_ERROR = 2;
		UNAVAILABLE = 3;
		HANDSHAKE = 4;
		ID_ALREADY_USED = 5;
		TIMEOUT = 6;
	}
	Type type = 1;
	string message = 2;
}

message CloseMessage {
	oneof reason {
		ErrorMessage error = 1;
		string normal = 2;
		bool shutdown = 3;
	}
}

message TargetMessage {
	bool toAll = 1;
	repeated UUIDMessage nodesInclude = 2;
	repeated UUIDMessage nodesExclude = 3;
	repeated string namespacesInclude = 4;
	repeated string namespacesExclude = 5;
}

message HeartbeatMessage {
}

message Packet {
	oneof value {
		// Transport
		CloseMessage close = 1;
		HeartbeatMessage heartbeat = 2;
		
		// Login
		LoginHandshakeMessage loginHandshake = 10;
		LoginChallengeMessage loginChallenge = 11;
		LoginResponseMessage loginResponse = 12;
		LoginSuccessMessage loginSuccess = 13;
		LoginUpgradeMessage  loginUpgrade = 14;
		
		// Network
		NodeTopologyMessage nodeTopology = 20;
		NodeUpdateMessage nodeUpdate = 21;
		NodeRemoveMessage nodeRemove = 22;

		// Tunnel
		TunnelMessage tunnelMessage = 30;
		TunnelRegister tunnelRegister = 31;
				
		// Procedure
		ProcedureMessage procedureMessage = 40;
	}
}

message TunnelMessage {
	int32 tunnelId = 1;
	TargetMessage target = 2;
	UUIDMessage sender = 3;
	bytes data = 4;
}

message TunnelRegister {
	enum Type {
		BYTES = 0;
		OBJECT = 1;
		STREAM = 2;
		CUSTOM = 4;
	}
	int32 tunnelId = 1;
	string name = 2;
	Type type = 3;
	bool request = 4;
}

message ProcedureMessage {
	TargetMessage target = 1;
	UUIDMessage sender = 2;
	oneof content {
		ProcedureCallMessage call = 4;
		ProcedureResponseMessage response = 5;
	}
}

message ProcedureCallMessage {
	ProcedureDescription procedure = 1;
	int32 id = 2;
	int64 timestamp = 3;
	int64 maxTimeout = 4;
	oneof data {
		bytes bytes = 20;
		bytes object = 21;
	}
}

message ProcedureResponseMessage {
	ProcedureDescription procedure = 1;
	int32 id = 2;
	int64 timestamp = 3;
	bool success = 4;
	bool cancelled = 5;
	oneof data {
		ErrorMessage error = 10;
		bytes bytes = 20;
		bytes object = 21;
	}
}
