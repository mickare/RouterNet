syntax = "proto3";

package de.rennschnitzel.backbone.net.protocol;

import "NetworkProtocol.proto";
import "HandshakeProtocol.proto";
import "ComponentsProtocol.proto";

message ErrorMessage {
	enum Type {
		UNDEFINED = 0;
		SERVER_ERROR = 1;
		PROTOCOL_ERROR = 2;
		UNAVAILABLE = 3;
		HANDSHAKE = 4;
	}
	Type type = 1;
	string message = 2;
}

message CloseMessage {
	oneof reason {
		ErrorMessage error = 1;
		string normal = 2;
		bool shutdown = 3;
	}
}

message TargetMessage {
	bool all = 1;
	repeated UUIDMessage serversInclude = 2;
	repeated UUIDMessage serversExclude = 3;
	repeated string namespacesInclude = 4;
	repeated string namespacesExclude = 5;
}

message Packet {
	oneof value {
		CloseMessage close = 1;
		LoginMessage login = 10;
		AuthChallengeMessage authChallenge = 11;
		AuthResponseMessage authResponse = 12;
		AuthSuccessMessage authSuccess = 13;
		ConnectedMessage connected = 20;
		DisconnectedMessage disconnected = 21;
		ServerUpdateMessage update = 22;
		ChannelMessage channelMessage = 30;
		ChannelRegister channelRegister = 31;
		ProcedureMessage procedureMessage = 40;
	}
}

message ChannelMessage {
	int32 channelId = 1;
	TargetMessage target = 2;
	UUIDMessage sender = 3;
	bytes data = 4;
}

message ChannelRegister {
	enum Type {
		BYTES = 0;
		OBJECT = 1;
		STREAM = 2;
		CUSTOM = 4;
	}
	int32 channelId = 1;
	string name = 2;
	Type type = 3;
}

message ProcedureMessage {
	TargetMessage target = 1;
	UUIDMessage sender = 2;
	oneof content {
		ProcedureCallMessage call = 4;
		ProcedureResponseMessage response = 5;
	}
}

message ProcedureCallMessage {
	ProcedureDescription procedure = 1;
	int32 id = 2;
	int64 timestamp = 3;
	int64 maxTimeout = 4;
	oneof data {
		bytes bytes = 20;
		bytes object = 21;
	}
}

message ProcedureResponseMessage {
	ProcedureDescription procedure = 1;
	int32 id = 2;
	int64 timestamp = 3;
	bool success = 4;
	bool cancelled = 5;
	oneof data {
		ErrorMessage error = 10;
		bytes bytes = 20;
		bytes object = 21;
	}
}
